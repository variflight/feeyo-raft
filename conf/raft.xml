<?xml version="1.0" encoding="UTF-8" ?>
<raft>

	<!-- 当 follower 在 election_tick * 100ms 的时间之后还没有收到 leader 发过来的消息，那么就会重新开始选举 -->
	<property name="electionTick">50</property>
	
	<!-- leader 每隔 hearbeat_tick 的时间，都会给 follower 发送心跳消息。默认 heartbeatTick * 100ms -->
	<property name="heartbeatTick">10</property>

	<property name="applied">0</property>
	
	<!-- 限制每次发送的最大 message size。默认 1MB -->
	<property name="maxSizePerMsg">1048576</property>
	
	<!-- 限制复制时候最大的 in-flight 的 message 的数量。默认 256 -->
	<property name="maxInflightMsgs">256</property>
	
	<!-- 
		Specify if the leader should check quorum activity. 
		Leader steps down when quorum is not active for an electionTimeout. 
	-->
	<property name="checkQuorum">true</property>
	
	<!-- 
		pre_vote enables the Pre-Vote algorithm described in raft thesis section
		9.6. This prevents disruption when a node that has been partitioned away
	 	rejoins the cluster.
	 -->
	<property name="preVote">true</property>
	
	<!-- 
		The range of election timeout. In some cases, we hope some nodes has less possibility to become leader. 
		This configuration ensures that the randomized election_timeout will always be suit in [min_election_tick, max_election_tick).
		If it is 0, then election_tick will be chosen.
	 -->
	<property name="minElectionTick">0</property>
	
	<!-- If it is 0, then 2 * election_tick will be chosen. -->
	<property name="maxElectionTick">0</property>
	
	<!-- 
		Choose the linearizability mode or the lease mode to read data.
		If you don’t care about the read consistency and want a higher read
		performance, you can use the lease mode.
		mode can be Safe or LeaseBased
	 -->
	<property name="readOnlyOption">Safe</property>
	
	<!-- Proposal 转发 -->
	<property name="disableProposalForwarding">false</property>
	
	<!-- 线性一致读  All、FollowerRead、Ignore -->
	<property name="linearizableReadOption">All</property>

	<!-- 
		Don't broadcast an empty raft entry to notify follower to commit an entry
		This may make follower wait a longer time to apply an entry.
		This configuration may affect proposal forwarding and follower read.
	-->
	<property name="skipBcastCommit">true</property>
	
	<!-- raftlog storage dir -->
	<property name="storageDir">/raft/logs</property>
	
	<!--日志条数达到10000条时做snapshot-->
	<property name="snapCount">10000</property>
	
	<!-- 两次快照的执行间隔，单位毫秒， 与snapCount参数是且的关系 -->
	<property name="snapInterval">1800000</property>
	
	<!-- 单个 log文件大小 50 * 1024 * 1024 -->
	<property name="maxLogFileSize">52428800</property>
	
	<!-- 默认为 true，表示强制将数据刷到磁盘上。如果是非金融安全级别的业务场景，建议设置成 false，以便获得更高的性能。 -->
	<property name="syncLog">false</property>

	<!-- Thread pool configuration for raft -->
	<property name="tpCoreThreads">50</property>
	<property name="tpMaxThreads">500</property>
	<property name="tpQueueCapacity">10</property>
	
</raft>